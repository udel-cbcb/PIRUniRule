//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.05.16 at 02:29:13 PM EDT 
//


package org.proteininformationresource.pirsr.interproscan5.model;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for SignatureLibraryType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="SignatureLibraryType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="PHOBIUS"/>
 *     &lt;enumeration value="GENE3D"/>
 *     &lt;enumeration value="PANTHER"/>
 *     &lt;enumeration value="PFAM"/>
 *     &lt;enumeration value="PFAM_B"/>
 *     &lt;enumeration value="SMART"/>
 *     &lt;enumeration value="SUPERFAMILY"/>
 *     &lt;enumeration value="PIRSF"/>
 *     &lt;enumeration value="PRINTS"/>
 *     &lt;enumeration value="PRODOM"/>
 *     &lt;enumeration value="PROSITE_PATTERNS"/>
 *     &lt;enumeration value="PROSITE_PROFILES"/>
 *     &lt;enumeration value="COILS"/>
 *     &lt;enumeration value="COMPARA"/>
 *     &lt;enumeration value="HAMAP"/>
 *     &lt;enumeration value="TIGRFAM"/>
 *     &lt;enumeration value="SIGNALP_EUK"/>
 *     &lt;enumeration value="SIGNALP_GRAM_POSITIVE"/>
 *     &lt;enumeration value="SIGNALP_GRAM_NEGATIVE"/>
 *     &lt;enumeration value="TMHMM"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "SignatureLibraryType")
@XmlEnum
public enum SignatureLibraryType {

    PHOBIUS("PHOBIUS"),
    @XmlEnumValue("GENE3D")
    GENE_3_D("GENE3D"),
    PANTHER("PANTHER"),
    PFAM("PFAM"),
    PFAM_B("PFAM_B"),
    SMART("SMART"),
    SUPERFAMILY("SUPERFAMILY"),
    PIRSF("PIRSF"),
    PRINTS("PRINTS"),
    PRODOM("PRODOM"),
    PROSITE_PATTERNS("PROSITE_PATTERNS"),
    PROSITE_PROFILES("PROSITE_PROFILES"),
    COILS("COILS"),
    COMPARA("COMPARA"),
    HAMAP("HAMAP"),
    TIGRFAM("TIGRFAM"),
    SIGNALP_EUK("SIGNALP_EUK"),
    SIGNALP_GRAM_POSITIVE("SIGNALP_GRAM_POSITIVE"),
    SIGNALP_GRAM_NEGATIVE("SIGNALP_GRAM_NEGATIVE"),
    TMHMM("TMHMM");
    private final String value;

    SignatureLibraryType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static SignatureLibraryType fromValue(String v) {
        for (SignatureLibraryType c: SignatureLibraryType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
